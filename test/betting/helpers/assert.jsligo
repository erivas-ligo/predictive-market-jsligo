#import "../../../src/contracts/jsligo/betting/types.jsligo" "Types"
#import "../../../src/contracts/jsligo/betting/callback/main.jsligo" "Callback"

// Assert contract call results; failwith with given string
const string_failure = ([res, p_expected] : [test_exec_result, string]) : unit => {
  let expected = Test.eval (p_expected) ;
  match (res, {
    Fail: (x: test_exec_error) => (
      match (x, {
        Rejected : (x : [michelson_code, address]) => assert (Test.michelson_equal (x[0], expected)),
        Balance_too_low : (_: {contract_too_low : address, contract_balance : tez, spend_request : tez}) => Test.failwith ("contract failed for an unknown reason"),
        Other : (_ : string) => Test.failwith ("contract failed for an unknown reason")
      })),
    Success: (_:nat) => Test.failwith ("bad price check")
  } )
} ;

// Assert contract result is successful
const tx_success = (res: test_exec_result) : unit =>
  match (res, {
    Fail: (_: test_exec_error) => Test.failwith("Transaction should not fail"),
    Success: (_:nat) => unit
  } );

// Assert Manager parameter with expected result
let balance = ([p_address, expected] : [address, tez]) : unit => {
    let balance_value : tez = Test.get_balance(p_address);
    assert (balance_value == expected)
};

// Assert Manager parameter with expected result 
let manager = (ctr_taddr : typed_address<Types.action, Types.storage>, expected : address) : unit => {
    let ctr_storage : Types.storage = Test.get_storage(ctr_taddr);
    let ctr_value : address = (ctr_storage.manager);
    assert (ctr_value == expected)
};

// Assert Oracle Address parameter with expected result 
let oracle = ([ctr_taddr, expected] : [typed_address<Types.action, Types.storage>, address]) : unit => {
    let ctr_storage : Types.storage = Test.get_storage(ctr_taddr);
    let ctr_value : address = (ctr_storage.oracle_address);
    assert (ctr_value == expected)
};

// Assert is_betting_paused parameter with expected result 
let is_betting_paused = ([ctr_taddr, expected] : [typed_address<Types.action, Types.storage>, bool]) : unit => {
    let ctr_storage : Types.storage = Test.get_storage(ctr_taddr);
    let ctr_value : bool = (ctr_storage.bet_config.is_betting_paused);
    assert(ctr_value == expected)
};

// Assert isPauseis_event_creation_pausedd parameter with expected result 
let is_event_creation_paused = ([ctr_taddr, expected] : [typed_address<Types.action, Types.storage>, bool]) : unit => {
    let ctr_storage : Types.storage = Test.get_storage(ctr_taddr);
    let ctr_value : bool = (ctr_storage.bet_config.is_event_creation_paused);
    assert (ctr_value == expected)
};

// Assert Events Map parameter with expected result 
let events_map = ([ctr_taddr, expected] : [typed_address<Types.action, Types.storage>, big_map<nat, Types.event_type>] ) : unit => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value : big_map <nat, Types.event_type> = ctr_storage.events;
    assert (ctr_value == expected)
};

// Assert Events Bets Map parameter with expected result 
let events_bet_map = ([ctr_taddr, expected] : [typed_address<Types.action, Types.storage>, big_map<nat, Types.event_bets>]) : unit => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value : big_map<nat, Types.event_bets>  = (ctr_storage.events_bets);
    assert (ctr_value == expected)
};

let event = ([taddr, expected_event] : [typed_address<Callback.parameter, Callback.storage>, Types.event_type]) : unit => {
    let storage = Test.get_storage(taddr);
    let _ = assert(storage.name == expected_event.name);
    let _ = assert(storage.videogame == expected_event.videogame);
    let _ = assert(storage.beginAt == expected_event.beginAt);
    let _ = assert(storage.endAt == expected_event.endAt);
    let _ = assert(storage.modifiedAt == expected_event.modifiedAt);
    let _ = assert(storage.opponents == expected_event.opponents);
    let _ = assert(storage.gameStatus == expected_event.gameStatus);
    return unit
};
