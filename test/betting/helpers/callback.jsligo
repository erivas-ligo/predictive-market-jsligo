#import "../../../src/contracts/jsligo/betting/callback/main.jsligo" "Callback"

(* Some types for readability *)
type taddr = typed_address<Callback.parameter, Callback.storage>
type contr = contract<Callback.parameter> 
type originated = {
    addr: address,
    taddr: taddr,
    contr: contr
}

let plain_timestamp : timestamp = ("1970-01-01T00:00:01Z" as timestamp);

// Base Callback storage 
let base_storage (bettingAddr : address) : Callback.storage = {
    name                : "",
    videogame           : "",
    begin_at            : plain_timestamp + 2048,
    end_at              : plain_timestamp + 4096,
    modified_at         : plain_timestamp,
    opponents           : { team_one : "", team_two : ""},
    game_status         : Ongoing(),
    start_bet_time      : plain_timestamp + 360,
    closed_bet_time     : plain_timestamp + 3072,
    bets_team_one       : (Map.empty as map<address, tez>),
    bets_team_one_index : 0 as nat,
    bets_team_one_total : 0 as mutez,
    bets_team_two       : (Map.empty as map<address, tez>),
    bets_team_two_index : 0 as nat,
    bets_team_two_total : 0 as mutez,
    metadata            : (Map.empty as map<string, bytes>),
    bettingAddr         : bettingAddr
}

let originate_from_file (initial_storage : Callback.storage) : originated =
    let betting_path           = "../../../src/contracts/jsligo/betting/callback/main.jsligo";
    let iTres                  = Test.run( (x : Callback.storage) => x, initial_storage);
    let (callback_addr, _, _)  = Test.originate_from_file(betting_path, "main", (list([]) as list<string>), iTres, 0 as mutez);
    let callback_taddress      = (Test.cast_address(callback_addr) as typed_address<Callback.parameter, Callback.storage>);
    let callback_contract      = Test.to_contract (callback_taddress);
    return {
        contr=callback_contract,
        taddr=callback_taddress,
        addr=callback_addr
    }
