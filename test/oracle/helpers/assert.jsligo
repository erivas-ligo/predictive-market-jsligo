#import "../../../src/contracts/jsligo/oracle/types.jsligo" "Types"
#import "../../../src/contracts/jsligo/oracle/callback/main.jsligo" "Callback"

// Assert contract call results; failwith with given string
const string_failure = ([res, p_expected]: [test_exec_result, string]) =>  {
  let expected = Test.eval (p_expected) ;
  match (res, {
    Fail: (x: test_exec_error) => (
      match (x, {
        Rejected: (x:[michelson_code,address]) => assert (Test.michelson_equal (x[0], expected)),
        Balance_too_low: _ => Test.failwith ("contract failed for an unknown reason"),
        Other: _ => Test.failwith ("contract failed for an unknown reason")
      })),
    Success: _ => Test.failwith ("bad price check")
  } );
} ;

// Assert contract result is successful
const tx_success = (res: test_exec_result) => 
  match (res, {
    Fail: _ => Test.failwith("Transaction should not fail"),
    Success: _ => unit
  } );


// Some types for readability
type taddr = typed_address<Types.action, Types.storage>;
type taddrCallback = typed_address<Callback.parameter, Callback.storage>;

// Assert Manager parameter with expected result 
const manager = ([ctr_taddr, expected] : [taddr, address]) => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value = (ctr_storage.manager);
    assert (ctr_value == expected)
};

// Assert Signer parameter with expected result
const signer = ([ctr_taddr, expected] : [taddr,  address]) =>  {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value = (ctr_storage.signer);
    assert (ctr_value == expected)
};
// Assert isPaused parameter with expected result
const ispaused = ([ctr_taddr, expected] : [taddr, bool]) =>  {
    let ctr_storage : Types.storage = Test.get_storage(ctr_taddr);
    let ctr_value : bool = (ctr_storage.isPaused);
    assert (ctr_value == expected)
};

// Assert isPaused parameter with expected result
const events_map = ([ctr_taddr, expected] : [taddr,  map<nat, Types.event_type>]) =>  {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value : map<nat, Types.event_type> = ctr_storage.events;
    assert (ctr_value == expected)
};

const event = ([taddr, expected_event] : [taddrCallback, Types.event_type]) =>  {
    let storage = Test.get_storage(taddr);
    assert(storage.name == expected_event.name);
    assert(storage.videogame == expected_event.videogame);
    assert(storage.beginAt == expected_event.beginAt);
    assert(storage.endAt == expected_event.endAt);
    assert(storage.modifiedAt == expected_event.modifiedAt);
    assert(storage.opponents == expected_event.opponents);
    assert(storage.gameStatus == expected_event.gameStatus);
};