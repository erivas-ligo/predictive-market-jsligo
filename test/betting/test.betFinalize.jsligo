#import "../../src/contracts/cameligo/betting/errors.mligo" "Errors"
#import "helpers/bootstrap.mligo" "Bootstrap"
#import "helpers/helper.mligo" "Helper"
#import "helpers/assert.mligo" "Assert"
#import "helpers/events.mligo" "Events"
#import "../common/log.jsligo" "Log"

const _ = Log.describe("[Betting - FinalizeBet] test suite");

// Basic Win Reward Test

const _test_win_basic_team1_should_work = () => { 
  //Given
  let [_, betting_contract, betting_taddress, elon, _, alice, bob, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), (800000000000 as mutez));
  let _ = Helper.trsc_add_bet_success (betting_contract, bob,   (0 as nat), (true  as bool), (800000000000 as mutez));
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), (800000000000 as mutez));
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_team1_win);
  let storage = Test.get_storage(betting_taddress);
  let quota_left : nat = abs((100 as nat) - storage.bet_config.retained_profit_quota);
  let expected_alice_balance = Test.get_balance(alice) + ((800000000000 as mutez) + (400000000000 as mutez)) * quota_left / (100 as nat);
  let expected_bob_balance   = Test.get_balance(bob)   + ((800000000000 as mutez) + (400000000000 as mutez)) * quota_left / (100 as nat);
  let expected_mike_balance  = Test.get_balance(mike);
  //When
  let _ = Helper.trsc_finalize_bet_success (betting_contract, elon, (0 as nat));
  //Then
  let _ = assert (expected_alice_balance == Test.get_balance(alice));
  let _ = assert (expected_bob_balance   == Test.get_balance(bob));
  let _ = assert (expected_mike_balance  == Test.get_balance(mike));
  "OK"
};

// Basic Draw Reward Test
const _test_draw_should_work = () => { 
  //Given
  let [_, betting_contract, betting_taddress, elon, _, alice, bob, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), (800000000000 as mutez));
  let _ = Helper.trsc_add_bet_success (betting_contract, bob,   (0 as nat), (true  as bool), (800000000000 as mutez));
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), (800000000000 as mutez));
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_draw);
  let storage = Test.get_storage(betting_taddress);
  let quota_left : nat = abs((100 as nat) - storage.bet_config.retained_profit_quota);
  let expected_alice_balance = Test.get_balance(alice) + (800000000000 as mutez) * quota_left / (100 as nat);
  let expected_bob_balance   = Test.get_balance(bob)   + (800000000000 as mutez) * quota_left / (100 as nat);
  let expected_mike_balance  = Test.get_balance(mike)  + (800000000000 as mutez) * quota_left / (100 as nat);
  //When
  let _ = Helper.trsc_finalize_bet_success (betting_contract, elon, (0 as nat));
  //Then
  let _ = assert (expected_alice_balance == Test.get_balance(alice));
  let _ = assert (expected_bob_balance   == Test.get_balance(bob));
  let _ = assert (expected_mike_balance  == Test.get_balance(mike));
  "OK"
};


// Weighted Win Reward Test
const _test_win_weighted_team1_should_work = () => { 
  //Given
  let [_, betting_contract, betting_taddress, elon, _, alice, bob, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), (800000000000 as mutez));
  let _ = Helper.trsc_add_bet_success (betting_contract, bob,   (0 as nat), (true  as bool), (400000000000 as mutez));
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), (600000000000 as mutez));
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_team1_win);
  let storage = Test.get_storage(betting_taddress);
  let quota_left : nat = abs((100 as nat) - storage.bet_config.retained_profit_quota);
  let expected_alice_balance = Test.get_balance(alice) + ((800000000000 as mutez) + (400000000000 as mutez)) * quota_left / (100 as nat);
  let expected_bob_balance   = Test.get_balance(bob)   + ((400000000000 as mutez) + (200000000000 as mutez)) * quota_left / (100 as nat);
  //When
  let _ = Helper.trsc_finalize_bet_success (betting_contract, elon, (0 as nat));
  //Then
  let alice_bal_error : tez = Option.unopt(expected_alice_balance - Test.get_balance(alice));
  //let alice_bal_error : tez = match( (expected_alice_balance - Test.get_balance(alice)), list([
  //  Some: (b: tez) => b,
  //  None: ()   => failwith("Weighted Win Reward Test Fails")
  //]));
  let bob_bal_error : tez = Option.unopt(expected_bob_balance - Test.get_balance(bob));
  //let bob_bal_error : tez = match() (expected_bob_balance - Test.get_balance(bob)), list([
  //  Some: (b: tez) => b,
  //  None: ()   => failwith("Weighted Win Reward Test Fails")
  //]));
  let _ = assert (alice_bal_error < (1 as tez));
  let _ = assert (bob_bal_error   < (1 as tez));
  "OK"
};


//  Weighted Win Reward Test Team 2
const _test_win_weighted_team2_should_work = () => { 
  //Given
  let [_, betting_contract, betting_taddress, elon, _, alice, bob, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), 30000 as tez);
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), 60000 as tez);
  let _ = Helper.trsc_add_bet_success (betting_contract, bob,   (0 as nat), (false as bool), 30000 as tez);
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_team2_win);
  let storage = Test.get_storage(betting_taddress);
  let quota_left : nat = abs((100 as nat) - storage.bet_config.retained_profit_quota);
  let expected_mike_balance = Test.get_balance(mike) + ((60000 as tez) + (20000 as tez)) * quota_left / (100 as nat);
  let expected_bob_balance = Test.get_balance(bob) + ((30000 as tez) + (10000 as tez)) * quota_left / (100 as nat);
  //When
  let _ = Helper.trsc_finalize_bet_success (betting_contract, elon, (0 as nat));
  //Then
  let mike_bal_error : tez = Option.unopt(expected_mike_balance - Test.get_balance(mike));
  //let mike_bal_error : tez = match( (expected_mike_balance - Test.get_balance(mike)), list([
  //  Some: (b: tez) => b, 
  //  None: () => failwith("Double Weighted Win Reward Test Team 2 Fails")
  //]));
  let bob_bal_error : tez =Option.unopt(expected_bob_balance - Test.get_balance(bob));
  //let bob_bal_error : tez = match((expected_bob_balance - Test.get_balance(bob)), list([
  //  Some: (b: tez) => b, 
  //  None: () => failwith("Double Weighted Win Reward Test Team 2 Fails")
  //]));
  let _ = assert (mike_bal_error < (1 as tez));
  let _ = assert (bob_bal_error < (1 as tez));
  "OK"
};


// Finalizing a bet two times should fail
const _test_finalizing_bet_two_times_should_fail = () => { 
  //Given
  let [_, betting_contract, _, elon, _, alice, _, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), 30000 as tez);
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), 60000 as tez);
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_team1_win);
  //When
  let ret = Helper.trsc_update_event (betting_contract, elon, (0 as nat), Events.finalized_event_team1_win);
  //Then
  let _ = Assert.string_failure(ret)(Errors.bet_finished);
  "OK"
};


// Claiming a bet two times should fail

const _test_claim_bet_two_times_should_fail = () => { 
  //Given
  let [_, betting_contract, _, elon, _, alice, _, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), 30000 as tez);
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), 60000 as tez);
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_team1_win);
  let _ = Helper.trsc_finalize_bet_success (betting_contract, elon, (0 as nat));
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, elon, (0 as nat));
  //Then
  let _ = Assert.string_failure(ret)(Errors.event_already_claimed);
  "OK"
};


// Finalising a bet without outcome should fail
const _test_finalizing_bet_without_outcome_should_fail = () => { 
  //Given
  let [_, betting_contract, _, elon, _, alice, _, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), 1000 as tez);
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), 1000 as tez);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, elon, (0 as nat));
  //Then
  let _ = Assert.string_failure(ret)(Errors.bet_not_finished);
  "OK"
};


// Finalising a wrong Id
const _test_finalizing_bet_with_wrong_id_should_fail = () => { 
  //Given
  let [_, betting_contract, _, elon, _, alice, _, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), 1000 as tez);
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), 1000 as tez);
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_team1_win);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, elon, (1 as nat));
  //Then
  let _ = Assert.string_failure(ret)(Errors.no_event_id);
  "OK"
};


// Winning without counterparty should refund
const _test_winning_without_counterparty_refund_should_work = () => { 
  //Given
  let [_, betting_contract, _betting_taddress, elon, _, alice, _, _] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), (1000 as tez));
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_team1_win);
  let expected_alice_balance = Test.get_balance(alice) + (1000 as tez);
  //When
  let _ = Helper.trsc_finalize_bet_success (betting_contract, elon, (0 as nat));
  //Then
  let _ = assert (expected_alice_balance == Test.get_balance(alice));
  "OK"
};


// Finalising an event not finished should fail
const _test_finalizing_event_not_finished_should_fail = () => { 
  //Given
  let [_, betting_contract, _, elon, _, alice, _, mike] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), 1000 as tez);
  let _ = Helper.trsc_add_bet_success (betting_contract, mike,  (0 as nat), (false as bool), 1000 as tez);
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_too_long);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, elon, (0 as nat));
  //Then
  let _ = Assert.string_failure(ret)(Errors.bet_period_not_finished);
  "OK"
};


// Finalising an event without manager rights should fail
const _test_finalizing_event_without_manager_rights_should_fail = () => { 
  //Given
  let [_, betting_contract, _, elon, _, alice, _, _] = Bootstrap.bootstrap();
  let _ = Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  let _ = Helper.trsc_add_bet_success (betting_contract, alice, (0 as nat), (true  as bool), 1000 as tez);
  let _ = Helper.trsc_update_event_success (betting_contract, elon, (0 as nat), Events.finalized_event_too_long);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, alice, (0 as nat));
  //Then
  let _ = Assert.string_failure(ret)(Errors.not_manager);
  "OK"
};

const test_win_basic_team1_should_work = _test_win_basic_team1_should_work();
const test_draw_should_work = _test_draw_should_work();
const test_win_weighted_team1_should_work = _test_win_weighted_team1_should_work();
const test_win_weighted_team2_should_work = _test_win_weighted_team2_should_work();
const test_claim_bet_two_times_should_fail = _test_claim_bet_two_times_should_fail();
const test_finalizing_bet_without_outcome_should_fail = _test_finalizing_bet_without_outcome_should_fail();
const test_finalizing_bet_with_wrong_id_should_fail = _test_finalizing_bet_with_wrong_id_should_fail();
const test_winning_without_counterparty_refund_should_work = _test_winning_without_counterparty_refund_should_work();
const test_finalizing_event_not_finished_should_fail = _test_finalizing_event_not_finished_should_fail();
const test_finalizing_event_without_manager_rights_should_fail = _test_finalizing_event_without_manager_rights_should_fail();