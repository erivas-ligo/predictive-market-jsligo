#import "../../../src/contracts/jsligo/betting/main.jsligo" "Betting"
#import "../../../src/contracts/jsligo/betting/types.jsligo" "Types"
#import "bootstrap.jsligo" "Bootstrap"
#import "assert.jsligo" "Assert"
#import "events.jsligo" "Events"

const empty_map : big_map<nat, Types.event_type> = (Big_map.empty as big_map<nat, Types.event_type>);
const empty_bet_map : big_map<nat, Types.event_bets> = (Big_map.empty as big_map<nat, Types.event_bets>);

const one_event_map : big_map<nat, Types.event_type> = Big_map.literal(list([
  [(0 as nat), Events.primary_event]
  ]));
const double_event_map : big_map<nat, Types.event_type> = Big_map.literal(list([
  [(0 as nat), Events.primary_event],
  [(1 as nat), Events.primary_event]
  ]));
const three_event_map : big_map<nat, Types.event_type> = Big_map.literal(list([
  [(0 as nat), Events.primary_event],
  [(1 as nat), Events.primary_event],
  [(2 as nat), Events.primary_event]
  ]));

const trsc_change_manager = ([contr, from, new_] : [contract<Types.action>, address, address]) => {
  let _ = Test.set_source (from);
  let result : test_exec_result = Test.transfer_to_contract(contr, (ChangeManager (new_)), (0 as mutez));
  result
};

const trsc_change_manager_success = ([contr, from, new_] : [contract<Types.action>, address, address]) => {
  Assert.tx_success (trsc_change_manager(contr, from, new_))
};

const trsc_change_oracle_address = ([contr, from, new_] : [contract<Types.action>, address, address]) => {
  let _ = Test.set_source (from);
  let result : test_exec_result = Test.transfer_to_contract(contr, (ChangeOracleAddress (new_)), (0 as mutez));
  result
};

const trsc_change_oracle_address_success = ([contr, from, new_] : [contract<Types.action>, address, address]) => {
  Assert.tx_success (trsc_change_oracle_address(contr, from, new_))
};

const trsc_switch_pauseBetting = ([contr, from] : [contract<Types.action>, address]) => {
  let _ = Test.set_source (from);
  let result : test_exec_result = Test.transfer_to_contract(contr ,(SwitchPauseBetting()), (0 as mutez));
  result
};

const trsc_switch_pauseBetting_success = ([contr, from] : [contract<Types.action>, address]) => {
  Assert.tx_success (trsc_switch_pauseBetting(contr, from))
};

const trsc_switch_pauseEventCreation = ([contr, from] : [contract<Types.action>, address]) => {
  let _ = Test.set_source (from);
  let result : test_exec_result = Test.transfer_to_contract(contr, (SwitchPauseEventCreation()), (0 as mutez));
  result
};

const trsc_switch_pauseEventCreation_success = ([contr, from] : [contract<Types.action>, address]) => {
  Assert.tx_success (trsc_switch_pauseEventCreation(contr, from))
};

const trsc_add_event = ([contr, from, event] : [contract<Types.action>, address, Types.add_event_parameter]) => {
  let _ = Test.set_source (from);
  let result : test_exec_result = Test.transfer_to_contract(contr, (AddEvent(event)), (0 as mutez));
  result
};

const trsc_add_event_success = ([contr, from, event] : [contract<Types.action>, address, Types.add_event_parameter]) => {
  Assert.tx_success (trsc_add_event(contr, from, event))
};

const trsc_update_event = ([contr, from, event_num, event] : [contract<Types.action>, address, nat, Types.event_type]) => {
  let _ = Test.set_source (from);
  let updateEventParam : Types.update_event_parameter =
  {
      updatedEventId : event_num,
      updatedEvent : event
  };
  let result : test_exec_result = Test.transfer_to_contract(contr, (UpdateEvent(updateEventParam)), (0 as mutez));
  result
};

const trsc_update_event_success = ([contr, from, event_num, event] : [contract<Types.action>, address, nat, Types.event_type]) => {
  Assert.tx_success (trsc_update_event(contr, from, event_num, event))
};

const trsc_get_event = ([contr, from, cbk_addr, event_num] : [contract<Types.action>, address, address, nat]) => {
    let _ = Test.set_source (from);
    let callbackParameter : Types.callback_asked_parameter =
    {
        requestedEventId : event_num,
        callback : cbk_addr
    };
    let result_cbk = Test.transfer_to_contract(contr, (GetEvent (callbackParameter)), (0 as mutez));
    result_cbk
};

const trsc_get_event_success = ([contr, from, cbk_addr, event_num ]: [contract<Types.action>, address, address, nat]) => {
  Assert.tx_success (trsc_get_event(contr, from, cbk_addr, event_num))
};

const trsc_add_bet = ([contr, from, pRequestedEventID, pTeamOneBet, pBetAmount] : [contract<Types.action>, address, nat, bool, tez]) => {
  let _ = Test.set_source (from);
  let addBetParam : Types.add_bet_parameter = {
      requestedEventId : pRequestedEventID,
     teamOne_bet : pTeamOneBet
  };
  let result_tx = Test.transfer_to_contract(contr, (AddBet (addBetParam)), pBetAmount);
  result_tx
};

const trsc_add_bet_success = ([contr, from, pRequestedEventID, pTeamOneBet, pBetAmount] : [contract<Types.action>, address, nat, bool, tez]) => {
  Assert.tx_success (trsc_add_bet(contr, from, pRequestedEventID, pTeamOneBet, pBetAmount))
};

const trsc_finalize_bet = ([contr, from, pRequestedEventID] : [contract<Types.action>, address, nat]) => {
  let _ = Test.set_source (from);
  let result_tx = Test.transfer_to_contract(contr, (FinalizeBet (pRequestedEventID)), (0 as mutez));
  result_tx
};

const trsc_finalize_bet_success = ([contr, from, pRequestedEventID] : [contract<Types.action>, address, nat]) => {
  Assert.tx_success (trsc_finalize_bet(contr, from, pRequestedEventID))
};
