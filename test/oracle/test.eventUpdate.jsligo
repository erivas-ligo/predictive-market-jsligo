#import "../../src/contracts/cameligo/oracle/errors.mligo" "Errors"
#import "../../src/contracts/cameligo/oracle/types.mligo" "Types"
#import "helpers/bootstrap.jsligo" "Bootstrap"
#import "helpers/helper.jsligo" "Helper"
#import "helpers/assert.jsligo" "Assert"
#import "../common/log.jsligo" "Log"

const _ = Log.describe("[Oracle - EventUpdate] test suite")

const updated_eventMap : map<nat, Types.event_type> = Map.literal( list([
    [0 as nat, Bootstrap.secondary_event]
    ]))

const updated_three_event_map : map<nat, Types.event_type> = Map.literal( list([
    [0 as nat, Bootstrap.primary_event],
    [1 as nat, Bootstrap.primary_event],
    [2 as nat, Bootstrap.secondary_event]
    ]))

const _test_update_event_from_manager_should_work = () => {
    let [oracle_contract, oracle_taddress, elon, _, _, _, _] = Bootstrap.bootstrap_oracle();
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Assert.events_map(oracle_taddress, Helper.one_event_map);

    let _ = Helper.trsc_update_event_success (oracle_contract, elon, 0 as nat, Bootstrap.secondary_event);
    let _ = Assert.events_map(oracle_taddress, updated_eventMap);
    "OK"
};

const _test_update_event_from_signer_should_work = () => {
    let [oracle_contract, oracle_taddress, elon, jeff, _, _, _] = Bootstrap.bootstrap_oracle();
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Assert.events_map(oracle_taddress, Helper.one_event_map);

    let _ = Helper.trsc_update_event_success (oracle_contract, jeff, 0 as nat, Bootstrap.secondary_event);
    let _ = Assert.events_map(oracle_taddress, updated_eventMap);
    "OK"
};

const _test_update_event_from_unauthorized_address_should_not_work = () => {
    let [oracle_contract, oracle_taddress, elon, _, alice, _, _] = Bootstrap.bootstrap_oracle();
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Assert.events_map(oracle_taddress, Helper.one_event_map);

    let ret = Helper.trsc_update_event (oracle_contract, alice, 0 as nat, Bootstrap.secondary_event);
    let _ = Assert.string_failure(ret, Errors.not_manager_nor_signer);
    let _ = Assert.events_map(oracle_taddress, Helper.one_event_map);
    "OK"
};

const _test_update_third_event_from_manager_should_work = () => {
    let [oracle_contract, oracle_taddress, elon, _, _, _, _] = Bootstrap.bootstrap_oracle();
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Assert.events_map(oracle_taddress, Helper.three_event_map);

    let _ = Helper.trsc_update_event_success (oracle_contract, elon, 2 as nat, Bootstrap.secondary_event);
    let _ = Assert.events_map(oracle_taddress, updated_three_event_map);
    "OK"
};

const _test_update_third_event_from_signer_should_work = () => {
    let [oracle_contract, oracle_taddress, elon, jeff, _, _, _] = Bootstrap.bootstrap_oracle();
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Helper.trsc_add_event_success (oracle_contract, elon, Bootstrap.primary_event);
    let _ = Assert.events_map(oracle_taddress, Helper.three_event_map);
    
    let _ = Helper.trsc_update_event_success (oracle_contract, jeff, 2 as nat, Bootstrap.secondary_event);
    let _ = Assert.events_map(oracle_taddress, updated_three_event_map);
    "OK"
};

const test_update_event_from_manager_should_work = _test_update_event_from_manager_should_work();
const test_update_event_from_signer_should_work = _test_update_event_from_signer_should_work();
const test_update_event_from_unauthorized_address_should_not_work = _test_update_event_from_unauthorized_address_should_not_work();
const test_update_third_event_from_manager_should_work = _test_update_third_event_from_manager_should_work();
const test_update_third_event_from_signer_should_work = _test_update_third_event_from_signer_should_work();
