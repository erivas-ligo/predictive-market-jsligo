#import "../types.jsligo" "BETTING_Types"

type storage = 
  [@layout:comb] {
  name : string,
  videogame : string,
  begin_at : timestamp,
  end_at : timestamp,
  modified_at : timestamp,
  opponents : { team_one : string, team_two : string},
  game_status : BETTING_Types.game_status,
  start_bet_time : timestamp,
  closed_bet_time : timestamp,
  bets_team_one : map <address, tez>,
  bets_team_one_index : nat,
  bets_team_one_total : tez,
  bets_team_two : map <address, tez>,
  bets_team_two_index : nat,
  bets_team_two_total : tez,
  metadata : map <string, bytes>,
  bettingAddr : address
  };

type requested_event_param =
  [@layout:comb] {
  name : string,
  videogame : string,
  begin_at : timestamp,
  end_at : timestamp,
  modified_at : timestamp,
  opponents : { team_one : string, team_two : string},
  game_status : BETTING_Types.game_status,
  start_bet_time : timestamp,
  closed_bet_time : timestamp,
  bets_team_one : map <address, tez>,
  bets_team_one_index : nat,
  bets_team_one_total : tez,
  bets_team_two : map <address, tez>,
  bets_team_two_index : nat,
  bets_team_two_total : tez,
};


type parameter = ["SaveEvent", requested_event_param] | ["RequestEvent", nat];

type return_ = [list<operation>, storage];

let saveEvent = (param: requested_event_param, store : storage) =>
  [list([]),  {...store,
    name : param.name,
    videogame : param.videogame,
    begin_at : param.begin_at,
    end_at : param.end_at,
    modified_at : param.modified_at,
    opponents : param.opponents,
    game_status : param.game_status,
    start_bet_time : param.start_bet_time,
    closed_bet_time : param.closed_bet_time,
    bets_team_one : param.bets_team_one,
    bets_team_one_index : param.bets_team_one_index,
    bets_team_one_total : param.bets_team_one_total,
    bets_team_two : param.bets_team_two,
    bets_team_two_index : param.bets_team_two_index,
    bets_team_two_total : param.bets_team_two_total
  }];

let requestEvent = (param: nat, store : storage) => {
  let payload : BETTING_Types.callback_asked_parameter = {
    requested_event_id : param,
    callback : Tezos.get_self_address()
  };
  let c_opt : option<contract<BETTING_Types.callback_asked_parameter>> = Tezos.get_entrypoint_opt("%getEvent", store.bettingAddr);
  let destination : contract<BETTING_Types.callback_asked_parameter> = match (c_opt , {
    Some:(c : contract<BETTING_Types.callback_asked_parameter>) => c,
    None:() => (failwith("missing_entrypoint_sendvalue") as contract<BETTING_Types.callback_asked_parameter>)
  });
  let op : operation = Tezos.transaction(payload, (0 as mutez), destination);
  [list([op]), store]
}

const main = (param: parameter, store: storage) : return_ =>
  match (param, {
    SaveEvent: param => saveEvent(param, store),
    RequestEvent: param => requestEvent(param, store)
  });
